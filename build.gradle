plugins {
    id 'org.springframework.boot' version '2.4.13'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
}

group 'ch.uzh.ifi.hasel'
version '1.0.0'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

springBoot {
    mainClass.set('ch.uzh.ifi.hase.soprafs24.Application')
}

dependencies {
    implementation 'org.mapstruct:mapstruct:1.3.1.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.1.Final'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    implementation 'com.google.code.gson:gson:2.10.1'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-jdbc'
    testImplementation 'com.h2database:h2'
}

bootJar {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

sonar {
    properties {
        property "sonar.projectKey", "Fisssch_SoPra_MG_Server"
        property "sonar.organization", "fs25-group25"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "SoPra_MG_Server"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    maxParallelForks = 1
}

def localPropsFile = rootProject.file("local.properties")
if (localPropsFile.exists()) {
    def Properties localProps = new Properties()
    localProps.load(new FileInputStream(localPropsFile))
    localProps.each { key, value ->
        project.ext.set(key.toString(), value.toString())
        if (System.getProperty(key.toString()) == null) {
            System.setProperty(key.toString(), value.toString())
        }
    }
}

processResources {
    filesMatching("**/application.properties") {
        expand(project.properties)
    }
}

defaultTasks 'bootJar', 'build'

bootRun {
    def propsFile = file('./local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(propsFile.newDataInputStream())
        props.each { key, value ->
            systemProperty key.toString(), value.toString()
        }
    }
}
